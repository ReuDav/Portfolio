import { useCallback, useEffect, useState } from "react";
import {
  StyleSheet,
  Text,
  View,
  ScrollView,
  TouchableOpacity,
  Pressable,
  Alert,
} from "react-native";
import type { SortableGridDragEndParams, SortableGridRenderItem } from "react-native-sortables";
import Sortable from "react-native-sortables";
import { useRouter } from "expo-router";
import { SafeAreaView } from "react-native-safe-area-context";
import LoadingScreen from "./loading";
import AsyncStorage from "@react-native-async-storage/async-storage";
import "@/global.css";

const SOLUTION = [
  [
    "Bab be√°ztat√°sa el≈ëz≈ë este",
    "Hagyma √©s fokhagyma megpir√≠t√°sa zs√≠ron",
    "Pirospaprika hozz√°ad√°sa √©s elkever√©se",
    "Felapr√≠tott marhah√∫s lepir√≠t√°sa",
    "F≈±szerez√©s √©s v√≠z hozz√°ad√°sa",
    "H√∫s f≈ëz√©se fed≈ë alatt",
    "Be√°ztatott bab hozz√°ad√°sa",
    "Z√∂lds√©gek belet√©tele √©s tov√°bbf≈ëz√©s",
    "Csipetke hozz√°ad√°sa",
    "Pihentet√©s √©s t√°lal√°s",
  ],
];

export default function Babgulyas() {
  const router = useRouter();
  const [data, setData] = useState<string[]>([]);
  const [lockedItems, setLockedItems] = useState<string[]>([]);
  const [incorrectItems, setIncorrectItems] = useState<string[]>([]);
  const [initialized, setInitialized] = useState(false);
  const [loading, setLoading] = useState(false); // üîπ √∫j state

  useEffect(() => {
    const randomized = RandomizeArray(SOLUTION[0]);
    setData(randomized);
    setInitialized(true);
  }, []);

  function RandomizeArray<T>(arr: T[]): T[] {
    const new_arr = [...arr];
    for (let i = new_arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [new_arr[i], new_arr[j]] = [new_arr[j], new_arr[i]];
    }
    if (JSON.stringify(new_arr) === JSON.stringify(arr)) {
      return RandomizeArray(arr);
    }
    return new_arr;
  }

  const renderItem = useCallback<SortableGridRenderItem<string>>(
    ({ item }) => {
      const isLocked = lockedItems.includes(item);
      const isIncorrect = incorrectItems.includes(item);

      return (
        <TouchableOpacity
          disabled={isLocked}
          activeOpacity={1}
          style={[
            styles.card,
            isLocked && styles.correctCard,
            isIncorrect && styles.incorrectCard,
          ]}
        >
          <Text
            style={[
              styles.cardText,
              isLocked && { color: "#244D3C" },
              isIncorrect && { color: "white" },
            ]}
          >
            {item} {isLocked ? "‚úÖ" : ""}
          </Text>
        </TouchableOpacity>
      );
    },
    [lockedItems, incorrectItems]
  );

  const CheckOrder = async () => {
    const correctOrder = SOLUTION[0];
    const newLocked: string[] = [];
    const newIncorrect: string[] = [];

    data.forEach((item, i) => {
      if (item === correctOrder[i]) newLocked.push(item);
      else newIncorrect.push(item);
    });

    const allLocked = Array.from(new Set([...lockedItems, ...newLocked]));
    setLockedItems(allLocked);
    setIncorrectItems(newIncorrect);

    // ‚úÖ ha minden j√≥, automatikusan tov√°bb
    if (allLocked.length === correctOrder.length) {
      try {
        setLoading(true); // ‚è≥ API-k√©r√©s indul

        const quizAnswers = await AsyncStorage.getItem("QUIZ_ANSWERS");
        const quizScore = await AsyncStorage.getItem("QUIZ_SCORE");
        const quizResult = await AsyncStorage.getItem("QUIZ_RESULT");

        const payload = {
          id: null,
          solution: [
            [
              quizResult ?? "Ismeretlen t√≠pus",
              quizAnswers ? JSON.parse(quizAnswers) : [],
              `Pontsz√°m: ${quizScore ?? "n/a"}`,
            ],
            [...SOLUTION[0]],
          ],
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        };

        console.log("üì¶ K√ºld√©s:", payload);

        const res = await fetch("https://weiss-toborzas-api.fly.dev/api/quiz-solution", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });

        if (!res.ok) throw new Error(`Fetch error: ${res.statusText}`);

        const response = await res.json();
        console.log("‚úÖ Sikeres ment√©s:", response);

        Alert.alert("üéâ K√©sz!", "Gratul√°lunk! Minden l√©p√©s helyes!");
        setTimeout(() => router.push("/feedback"), 1500);
      } catch (error) {
        console.error("‚ùå Hiba az adatk√ºld√©sn√©l:", error);
        Alert.alert("Hiba", "Nem siker√ºlt elk√ºldeni az eredm√©nyt.");
      } finally {
        setLoading(false); // ‚úÖ API v√©ge
      }
    }
  };

  if (!initialized || loading) return <LoadingScreen />; // üîπ Ha API fut, mutatjuk a t√∂lt√©st

  return (
    <SafeAreaView className="flex-1 bg-neutral-100 dark:bg-neutral-900">
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        <Sortable.Grid
          columns={1}
          data={data}
          renderItem={renderItem}
          rowGap={10}
          columnGap={10}
          dragActivationDelay={0}
          overDrag="none"
          onDragEnd={(params: SortableGridDragEndParams<string>) => {
            const draggedData = params.data;
            const movable = draggedData.filter(
              (item) => !lockedItems.includes(item)
            );

            const newOrder: string[] = [];
            let movableIndex = 0;

            for (let i = 0; i < SOLUTION[0].length; i++) {
              const correctItem = SOLUTION[0][i];
              if (lockedItems.includes(correctItem)) {
                newOrder.push(correctItem);
              } else {
                newOrder.push(movable[movableIndex]);
                movableIndex++;
              }
            }

            setData(newOrder);
          }}
        />

        <View style={styles.buttonContainer}>
          <Pressable style={styles.button} onPress={CheckOrder}>
            <Text style={styles.buttonText}>Ellen≈ërz√©s</Text>
          </Pressable>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

// üîπ St√≠lusok
const styles = StyleSheet.create({
  scrollContainer: {
    paddingVertical: 40,
    paddingHorizontal: 20,
  },
  card: {
    backgroundColor: "#cdefa9",
    color: "#090909",
    height: 50,
    borderRadius: 10,
    alignItems: "center",
    justifyContent: "center",
    marginHorizontal: 50,
    marginBottom: 10,
  },
  correctCard: {
    backgroundColor: "#009877",
  },
  incorrectCard: {
    backgroundColor: "#FF6F59",
  },
  cardText: {
    color: "#090909",
    fontWeight: "bold",
    textAlign: "center",
  },
  buttonContainer: {
    marginTop: 20,
    marginHorizontal: 50,
  },
  button: {
    borderRadius: 8,
    padding: 20,
    backgroundColor: "#244D3C",
  },
  buttonText: {
    color: "#fafafa",
    textAlign: "center",
    fontWeight: "700",
  },
});
